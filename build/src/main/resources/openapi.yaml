openapi: 3.0.3
info:
  contact:
    email: songoku@gmail.com
  description: Spring version of ChatApp Server
  title: ChatApp Server
  version: "1.0"
servers:
- url: http://localhost:3000/
tags:
- description: Auth related operations
  name: Auth
- description: User related operations
  name: User
- description: Group related operations
  name: Group
- description: Chat related operations
  name: Chat
- description: Chat messages related operations
  name: Chat Messages
- description: Group messages related operations
  name: Group Messages
- description: Group Members related operations
  name: Group Members
paths:
  /auth/signin:
    post:
      description: Signs user in
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedInUser'
          description: User successfully signed-in
      summary: Signs user in
      tags:
      - Auth
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Auth
  /auth/signout:
    post:
      description: Signs user out
      operationId: signOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        "202":
          description: Accepts the request for logout
      summary: Signs user out
      tags:
      - Auth
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Auth
  /auth/token/refresh:
    post:
      description: Provides new JWT based on valid refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedInUser'
          description: JWT successfully provided
      summary: Provides new JWT based on valid refresh token
      tags:
      - Auth
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Auth
  /users:
    post:
      description: Creates a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User successfully created
        "400":
          description: Incorrect Information
        "401":
          description: You're not allowed to created
      summary: Creates a new user
      tags:
      - User
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: User
  /users/{id}:
    delete:
      description: Deletes A User
      operationId: deleteUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User is not found
      summary: Deletes A User
      tags:
      - User
      x-accepts: application/json
      x-tags:
      - tag: User
    get:
      description: Gets user by ID
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User retrieved successfully
        "404":
          description: User is not found
      summary: Gets user by ID
      tags:
      - User
      x-accepts: application/json
      x-tags:
      - tag: User
    put:
      description: Updates user by ID
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User details updated successfully
        "404":
          description: User not found
      summary: Updates user by ID
      tags:
      - User
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: User
  /chats/{senderId}/{receiverId}:
    post:
      description: Creating new discussion with User by sending a message
      operationId: startChat
      parameters:
      - explode: false
        in: path
        name: senderId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: receiverId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCreationResponse'
          description: Chat successfully created
        "404":
          description: User not found
      summary: Creating new discussion with User by sending a message
      tags:
      - User
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: User
  /chats/{chatId}:
    delete:
      description: Deletes a chat
      operationId: deleteChat
      parameters:
      - explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Chat deleted successfully
      summary: Deletes a chat
      tags:
      - Chat
      x-accepts: application/json
      x-tags:
      - tag: Chat
  /chats/{chatId}/messages:
    get:
      description: Fetches {limit} number of chat messages from number {offset}
      operationId: getAllChatMessages
      parameters:
      - explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChatMessage'
                type: array
          description: Chat messages successfully retrieved
        "404":
          description: Chat not found
      summary: Fetches {limit} number of chat messages from number {offset}
      tags:
      - Chat Messages
      x-accepts: application/json
      x-tags:
      - tag: Chat Messages
    post:
      description: Send a message to a discussion
      operationId: sendMessage
      parameters:
      - explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              title: message
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: Message sent successfully
        "404":
          description: Chat not found
      summary: Send a message to a discussion
      tags:
      - Chat Messages
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Chat Messages
  /chats/{chatId}/messages/{messageId}:
    delete:
      description: Deletes a message from chat
      operationId: deleteChatMessage
      parameters:
      - explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Message successfully deleted
        "404":
          description: Message not found
      summary: Deletes a message from chat
      tags:
      - Chat Messages
      x-accepts: application/json
      x-tags:
      - tag: Chat Messages
    get:
      description: getMessage
      operationId: Get chat message by ID
      parameters:
      - explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: Message retrieved successfully
        "404":
          description: Message not found
      summary: getMessage
      tags:
      - Chat Messages
      x-accepts: application/json
      x-tags:
      - tag: Chat Messages
  /groups:
    post:
      description: Creates a group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreationRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group created successfully
      summary: Creates a group
      tags:
      - Group
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Group
  /groups/{groupId}:
    delete:
      description: Deletes group
      operationId: deleteGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Group successfully deleted
        "404":
          description: Group not found
      summary: Deletes group
      tags:
      - Group
      x-accepts: application/json
      x-tags:
      - tag: Group
    get:
      description: Fetches group information
      operationId: getGroupInformation
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group successfully retrieved
        "404":
          description: Group not found
      summary: Fetches group information
      tags:
      - Group
      x-accepts: application/json
      x-tags:
      - tag: Group
    put:
      description: Updates group information
      operationId: updateGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group successfully updated
      summary: Updates group information
      tags:
      - Group
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Group
  /groups/{groupId}/messages:
    get:
      description: Fetches {limit} number of group messages from number {offset}
      operationId: getAllGroupMessages
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupMessage'
                type: array
          description: Group messages successfully retrieved
        "404":
          description: Group not found
      summary: Fetches {limit} number of group messages from number {offset}
      tags:
      - Group Messages
      x-accepts: application/json
      x-tags:
      - tag: Group Messages
    post:
      description: Sends message in a group
      operationId: sendGroupMessage
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        "200":
          description: Group message successfully sent
        "404":
          description: Group not found
      summary: Sends message in a group
      tags:
      - Group Messages
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Group Messages
  /groups/{groupId}/messages/{messageId}:
    delete:
      description: Delete message in group
      operationId: deleteGroupMessage
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Group message deleted successfully
        "404":
          description: Message not found
      summary: Delete message in group
      tags:
      - Group Messages
      x-accepts: application/json
      x-tags:
      - tag: Group Messages
    get:
      description: Fetch single group message
      operationId: getGroupMessage
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessage'
          description: Group message successfully retrieved
        "404":
          description: Message not found
      summary: Fetch single group message
      tags:
      - Group Messages
      x-accepts: application/json
      x-tags:
      - tag: Group Messages
  /groups/{groupId}/members:
    get:
      description: Lists all group members
      operationId: getGroupMembers
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Group members fetched successfully
      summary: Lists all group members
      tags:
      - Group Members
      x-accepts: application/json
      x-tags:
      - tag: Group Members
    post:
      description: Add members to group
      operationId: addMembers
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGroupMembersRequest'
      responses:
        "200":
          description: Group members added successfully
        "404":
          description: Group not found
      summary: Add members to group
      tags:
      - Group Members
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Group Members
  /groups/{groupId}/members/{memberId}:
    delete:
      description: Gets member info such as number of messages written
      operationId: getMemberInfo
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: memberId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Member successfully removed
        "404":
          description: Member or group not found
      summary: Gets member info such as number of messages written
      tags:
      - Group Members
      x-accepts: application/json
      x-tags:
      - tag: Group Members
    put:
      description: Updates member role
      operationId: updateMemberRole
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: memberId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberRoleRequest'
      responses:
        "200":
          description: Member role successfully updated
        "404":
          description: Member or group not found
      summary: Updates member role
      tags:
      - Group Members
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: Group Members
components:
  parameters:
    id:
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    chatId:
      explode: false
      in: path
      name: chatId
      required: true
      schema:
        type: string
      style: simple
    groupId:
      explode: false
      in: path
      name: groupId
      required: true
      schema:
        type: string
      style: simple
    memberId:
      explode: false
      in: path
      name: memberId
      required: true
      schema:
        type: string
      style: simple
    senderId:
      explode: false
      in: path
      name: senderId
      required: true
      schema:
        type: string
      style: simple
    messageId:
      explode: false
      in: path
      name: messageId
      required: true
      schema:
        type: string
      style: simple
    offset:
      explode: true
      in: query
      name: offset
      required: false
      schema:
        type: number
      style: form
    limit:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        type: number
      style: form
  schemas:
    User:
      description: A User
      example:
        avatarURI: avatarURI
        firstName: firstName
        lastName: lastName
        password: password
        phone: phone
        id: id
        email: email
      properties:
        id:
          description: User identifier
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        avatarURI:
          type: string
      type: object
    Chat:
      description: A Chat
      example:
        dateCreated: 6.027456183070403
        recipientA:
          avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        recipientB:
          avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        messages:
        - null
        - null
        id: ""
      properties:
        id:
          description: Chat identifier
        recipientA:
          $ref: '#/components/schemas/User'
        recipientB:
          $ref: '#/components/schemas/User'
        messages:
          items:
            $ref: '#/components/schemas/ChatMessage'
          type: array
        dateCreated:
          type: number
      type: object
    ChatMessage:
      description: A Chat Message
      example:
        sender:
          avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        chat:
          dateCreated: 6.027456183070403
          recipientA:
            avatarURI: avatarURI
            firstName: firstName
            lastName: lastName
            password: password
            phone: phone
            id: id
            email: email
          recipientB:
            avatarURI: avatarURI
            firstName: firstName
            lastName: lastName
            password: password
            phone: phone
            id: id
            email: email
          messages:
          - null
          - null
          id: ""
        id: id
        text: text
        dateSent: 0.8008281904610115
      properties:
        id:
          description: Chat message identifier
          type: string
        text:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        dateSent:
          type: number
        chat:
          $ref: '#/components/schemas/Chat'
      type: object
    Group:
      description: A Group Message
      example:
        creator:
          avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        administrator:
          avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        members:
        - avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        - avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        messages:
        - sender:
            avatarURI: avatarURI
            firstName: firstName
            lastName: lastName
            password: password
            phone: phone
            id: id
            email: email
          id: id
          text: text
          dateSent: 0.8008281904610115
        - sender:
            avatarURI: avatarURI
            firstName: firstName
            lastName: lastName
            password: password
            phone: phone
            id: id
            email: email
          id: id
          text: text
          dateSent: 0.8008281904610115
        id: id
      properties:
        id:
          description: Group identifier
          type: string
        members:
          items:
            $ref: '#/components/schemas/User'
          type: array
        creator:
          $ref: '#/components/schemas/User'
        messages:
          items:
            $ref: '#/components/schemas/GroupMessage'
          type: array
        administrator:
          $ref: '#/components/schemas/User'
      type: object
    GroupMessage:
      description: A Group Message
      example:
        sender:
          avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        id: id
        text: text
        dateSent: 0.8008281904610115
      properties:
        id:
          description: Group message identifier
          type: string
        text:
          type: string
        dateSent:
          type: number
        sender:
          $ref: '#/components/schemas/User'
        group:
          $ref: '#/components/schemas/Group'
      type: object
    SignedInUser:
      description: Signed-in user information
      example:
        accessToken: accessToken
        userId: userId
        refreshToken: refreshToken
        username: username
      properties:
        refreshToken:
          description: Refresh Token, a unique secure string
          type: string
        accessToken:
          description: JWT Token, aka accessToken
          type: string
        userId:
          description: User identifier
          type: string
        username:
          description: User Name
          type: string
      type: object
    SignInRequest:
      description: Sign-in request
      example:
        password: password
        email: email
      properties:
        email:
          description: User email
          type: string
        password:
          description: User password
          type: string
      type: object
    RefreshToken:
      description: Contains the refresh token
      example:
        refreshToken: refreshToken
      properties:
        refreshToken:
          description: Refresh Token
          type: string
      type: object
    GroupCreationRequest:
      description: Group creation request
      example:
        creator: creator
        name: name
      properties:
        name:
          type: string
        creator:
          type: string
      type: object
    SendMessageRequest:
      description: Send Message Request
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    AddGroupMembersRequest:
      description: Add Group Members Request
      example:
        targetMembers:
        - avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
        - avatarURI: avatarURI
          firstName: firstName
          lastName: lastName
          password: password
          phone: phone
          id: id
          email: email
      properties:
        targetMembers:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UpdateMemberRoleRequest:
      description: Update Member Role Request
      example:
        role: administrator
      properties:
        role:
          enum:
          - administrator
          - standard
          type: string
      type: object
    ChatCreationResponse:
      description: Successful chat creation response
      example:
        chatId: chatId
      properties:
        chatId:
          type: string
      type: object
