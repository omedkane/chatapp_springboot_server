/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mr.gk2ms.chatapp_spring_server.api;

import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import mr.gk2ms.chatapp_spring_server.model.ChatCreationResponse;
import mr.gk2ms.chatapp_spring_server.model.SendMessageRequest;
import mr.gk2ms.chatapp_spring_server.model.User;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users : Creates a new user
     * Creates a new user
     *
     * @param user Created user object (optional)
     * @return User successfully created (status code 201)
     *         or Incorrect Information (status code 400)
     *         or You&#39;re not allowed to created (status code 401)
     */
    @Operation(
        operationId = "createUser",
        summary = "Creates a new user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class))),
            @ApiResponse(responseCode = "400", description = "Incorrect Information"),
            @ApiResponse(responseCode = "401", description = "You're not allowed to created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> createUser(
        @Parameter(name = "User", description = "Created user object", schema = @Schema(description = "")) @Valid @RequestBody(required = false) User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{id} : Deletes A User
     * Deletes A User
     *
     * @param id  (required)
     * @return User deleted successfully (status code 200)
     *         or User is not found (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Deletes A User",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User deleted successfully"),
            @ApiResponse(responseCode = "404", description = "User is not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}"
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "id", description = "", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{id} : Gets user by ID
     * Gets user by ID
     *
     * @param id  (required)
     * @return User retrieved successfully (status code 200)
     *         or User is not found (status code 404)
     */
    @Operation(
        operationId = "getUser",
        summary = "Gets user by ID",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User retrieved successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class))),
            @ApiResponse(responseCode = "404", description = "User is not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUser(
        @Parameter(name = "id", description = "", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /chats/new/{receiverId} : Creating new discussion with User by sending a message
     * Creating new discussion with User by sending a message
     *
     * @param receiverId  (required)
     * @param sendMessageRequest  (optional)
     * @return Chat successfully created (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "startChat",
        summary = "Creating new discussion with User by sending a message",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Chat successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ChatCreationResponse.class))),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/chats/new/{receiverId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ChatCreationResponse> startChat(
        @Parameter(name = "receiverId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("receiverId") String receiverId,
        @Parameter(name = "SendMessageRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) SendMessageRequest sendMessageRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : { \"dateCreated\" : 6.027456183070403, \"recipientA\" : { \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"recipientB\" : { \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"messages\" : [ { \"sender\" : { \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"id\" : \"id\", \"text\" : \"text\", \"dateSent\" : 0.8008281904610115 }, { \"sender\" : { \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"id\" : \"id\", \"text\" : \"text\", \"dateSent\" : 0.8008281904610115 } ], \"id\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{id} : Updates user by ID
     * Updates user by ID
     *
     * @param id  (required)
     * @param user Updated user (optional)
     * @return User details updated successfully (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Updates user by ID",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details updated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class))),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> updateUser(
        @Parameter(name = "id", description = "", required = true, schema = @Schema(description = "")) @PathVariable("id") String id,
        @Parameter(name = "User", description = "Updated user", schema = @Schema(description = "")) @Valid @RequestBody(required = false) User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
