/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mr.gk2ms.chatapp_spring_server.api;

import java.util.List;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import mr.gk2ms.chatapp_spring_server.model.DeleteMessagesRequest;
import mr.gk2ms.chatapp_spring_server.model.GroupMessage;
import mr.gk2ms.chatapp_spring_server.model.SendMessageRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "GroupMessages", description = "the GroupMessages API")
public interface GroupMessagesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /groups/{groupId}/messages/{messageId} : Delete messages in group
     * Delete messages in group
     *
     * @param groupId  (required)
     * @param deleteMessagesRequest  (optional)
     * @return Group message deleted successfully (status code 200)
     *         or Message not found (status code 404)
     */
    @Operation(
        operationId = "deleteGroupMessages",
        summary = "Delete messages in group",
        tags = { "Group Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group message deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Message not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/groups/{groupId}/messages/{messageId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deleteGroupMessages(
        @Parameter(name = "groupId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("groupId") String groupId,
        @Parameter(name = "DeleteMessagesRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) DeleteMessagesRequest deleteMessagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /groups/{groupId}/messages : Fetches {limit} number of group messages from number {offset}
     * Fetches {limit} number of group messages from number {offset}
     *
     * @param groupId  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @return Group messages successfully retrieved (status code 200)
     *         or Group not found (status code 404)
     */
    @Operation(
        operationId = "getAllGroupMessages",
        summary = "Fetches {limit} number of group messages from number {offset}",
        tags = { "Group Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group messages successfully retrieved", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  GroupMessage.class))),
            @ApiResponse(responseCode = "404", description = "Group not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/groups/{groupId}/messages",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GroupMessage>> getAllGroupMessages(
        @Parameter(name = "groupId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("groupId") String groupId,
        @Parameter(name = "offset", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sender\" : { \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"id\" : \"id\", \"text\" : \"text\", \"dateSent\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /groups/{groupId}/messages/{messageId} : Fetch single group message
     * Fetch single group message
     *
     * @param groupId  (required)
     * @param messageId  (required)
     * @return Group message successfully retrieved (status code 200)
     *         or Message not found (status code 404)
     */
    @Operation(
        operationId = "getGroupMessage",
        summary = "Fetch single group message",
        tags = { "Group Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group message successfully retrieved", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  GroupMessage.class))),
            @ApiResponse(responseCode = "404", description = "Message not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/groups/{groupId}/messages/{messageId}",
        produces = { "application/json" }
    )
    default ResponseEntity<GroupMessage> getGroupMessage(
        @Parameter(name = "groupId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("groupId") String groupId,
        @Parameter(name = "messageId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("messageId") String messageId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sender\" : { \"avatarURI\" : \"avatarURI\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"id\" : \"id\", \"text\" : \"text\", \"dateSent\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /groups/{groupId}/messages : Sends message in a group
     * Sends message in a group
     *
     * @param groupId  (required)
     * @param sendMessageRequest  (optional)
     * @return Group message successfully sent (status code 200)
     *         or Group not found (status code 404)
     */
    @Operation(
        operationId = "sendGroupMessage",
        summary = "Sends message in a group",
        tags = { "Group Messages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group message successfully sent"),
            @ApiResponse(responseCode = "404", description = "Group not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/groups/{groupId}/messages",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> sendGroupMessage(
        @Parameter(name = "groupId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("groupId") String groupId,
        @Parameter(name = "SendMessageRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) SendMessageRequest sendMessageRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
